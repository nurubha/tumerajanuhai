import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import tensorflow as tf
from sklearn.metrics import accuracy_score, precision_score,recall_score
from sklearn.model_selection import train_test_split
from tensorflow.keras import layers, losses
from tensorflow.keras.datasets import fashion_mnist
from tensorflow.keras.models import Model
(x_train, _), (x_test, _) = fashion_mnist.load_data()
x_train = x_train.astype('float32') / 255.
x_test = x_test.astype('float32') / 255.
print (x_train.shape)
print (x_test.shape)
latent_dim = 64
class Autoencoder(Model):
 def __init__(self, latent_dim):
 super(Autoencoder, self).__init__()
 self.latent_dim = latent_dim
 self.encoder = tf.keras.Sequential([
 layers.Flatten(),
 layers.Dense(latent_dim, activation='relu'),
 ])
 self.decoder = tf.keras.Sequential([
 layers.Dense(784, activation='sigmoid'),
 layers.Reshape((28, 28))
 ])
 def call(self, x):
 encoded = self.encoder(x)
 decoded = self.decoder(encoded)
 return decoded
autoencoder = Autoencoder(latent_dim)
autoencoder.compile(optimizer='adam', loss=losses.MeanSquaredError())
autoencoder.fit(x_train, x_train,epochs=10,shuffle=True,validation_data=(x_test, x_test))
encoded_imgs = autoencoder.encoder(x_test).numpy()
decoded_imgs = autoencoder.decoder(encoded_imgs).numpy()
n = 10
plt.figure(figsize=(20, 4))
for i in range(n):
# display original
 ax = plt.subplot(2, n, i + 1)
 plt.imshow(x_test[i])
 plt.title("original")
 plt.gray()
 ax.get_xaxis().set_visible(False)
 ax.get_yaxis().set_visible(False)
 # display reconstruction
 ax = plt.subplot(2, n, i + 1 + n)
 plt.imshow(decoded_imgs[i])
 plt.title("reconstructed")
 plt.gray()
 ax.get_xaxis().set_visible(False)
 ax.get_yaxis().set_visible(False)
plt.show()
dataframe =pd.read_csv('http://storage.googleapis.com/download.tensorflow.org/data/ecg.csv',
header=None)
raw_data = dataframe.values
dataframe.tail()
# The last element contains the labels
labels = raw_data[:, -1]
# The other data points are the electrocadriogram data
data = raw_data[:, 0:-1]
train_data, test_data, train_labels, test_labels = train_test_split(data, labels, test_size=0.2,
random_state=21)
#Normalize the data to [0,1].
min_val = tf.reduce_min(train_data)
max_val = tf.reduce_max(train_data)
train_data = (train_data - min_val) / (max_val - min_val)
test_data = (test_data - min_val) / (max_val - min_val)
train_data = tf.cast(train_data, tf.float32)
test_data = tf.cast(test_data, tf.float32)
train_labels = train_labels.astype(bool)
test_labels = test_labels.astype(bool)
normal_train_data = train_data[train_labels]
normal_test_data = test_data[test_labels]
anomalous_train_data = train_data[~train_labels]
anomalous_test_data = test_data[~test_labels]
#Plot a normal ECG.
plt.grid()
plt.plot(np.arange(140), normal_train_data[0])
plt.title("A Normal ECG")
plt.show()
#Plot an anomalous ECG.
plt.grid()
plt.plot(np.arange(140), anomalous_train_data[0])
plt.title("An Anomalous ECG")
plt.show()
#Build the model
class AnomalyDetector(Model):
 def __init__(self):
 super(AnomalyDetector, self).__init__()
 self.encoder = tf.keras.Sequential([
 layers.Dense(32, activation="relu"),
 layers.Dense(16, activation="relu"),
 layers.Dense(8, activation="relu")])
 self.decoder = tf.keras.Sequential([
 layers.Dense(16, activation="relu"),
 layers.Dense(32, activation="relu"),
 layers.Dense(140, activation="sigmoid")])
 def call(self, x):
 encoded = self.encoder(x)
 decoded = self.decoder(encoded)
 return decoded
autoencoder = AnomalyDetector()
autoencoder.compile(optimizer='adam', loss='mae')
history = autoencoder.fit(normal_train_data,
normal_train_data,epochs=20,batch_size=512,validation_data=(test_data, test_data),shuffle=True)
plt.plot(history.history["loss"], label="Training Loss")
plt.plot(history.history["val_loss"], label="Validation Loss")
plt.legend()
encoded_data = autoencoder.encoder(normal_test_data).numpy()
decoded_data = autoencoder.decoder(encoded_data).numpy()
plt.plot(normal_test_data[0], 'b')
plt.plot(decoded_data[0], 'r')
plt.fill_between(np.arange(140), decoded_data[0], normal_test_data[0],
color='lightcoral')
plt.legend(labels=["Input", "Reconstruction", "Error"])
plt.show()
encoded_data = autoencoder.encoder(anomalous_test_data).numpy()
decoded_data = autoencoder.decoder(encoded_data).numpy()
plt.plot(anomalous_test_data[0], 'b')
plt.plot(decoded_data[0], 'r')
plt.fill_between(np.arange(140), decoded_data[0],
anomalous_test_data[0], color='lightcoral')
plt.legend(labels=["Input", "Reconstruction", "Error"])
plt.show()
#Plot the reconstruction error on normal ECGs from the training set
reconstructions = autoencoder.predict(normal_train_data)
train_loss = tf.keras.losses.mae(reconstructions, normal_train_data)
plt.hist(train_loss[None,:], bins=50)
plt.xlabel("Train loss")
plt.ylabel("No of examples")
plt.show()
threshold = np.mean(train_loss) + np.std(train_loss)
print("Threshold: ", threshold)
reconstructions = autoencoder.predict(anomalous_test_data)
test_loss = tf.keras.losses.mae(reconstructions, anomalous_test_data)
plt.hist(test_loss[None, :], bins=50)
plt.xlabel("Test loss")
plt.ylabel("No of examples")
plt.show()
def predict(model, data, threshold):
 reconstructions = model(data)
 loss = tf.keras.losses.mae(reconstructions, data)
 return tf.math.less(loss, threshold)
def print_stats(predictions, labels):
 print("Accuracy = {}".format(accuracy_score(labels, predictions)))
 print("Precision = {}".format(precision_score(labels, predictions)))
 print("Recall = {}".format(recall_score(labels, predictions)))
preds = predict(autoencoder, train_data, threshold)
print_stats(preds, train_labels)
preds = predict(autoencoder, test_data, threshold)
print_stats(preds, test_labels)